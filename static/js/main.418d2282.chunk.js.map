{"version":3,"sources":["components/ShareButton.js","components/NewQuoteButton.js","components/Navbar.js","components/Author.js","components/Quote.js","components/OutputBox.js","components/Card.js","components/QuoteMachineView.js","App.js","serviceWorker.js","index.js"],"names":["ShareButton","red","this","props","visibleColorRed","green","visibleColorGreen","blue","visibleColorBlue","react_default","a","createElement","target","href","twitterLink","title","id","onClick","console","log","style","color","height","width","fontSize","backgroundColor","concat","Component","NewQuoteButton","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_this","changeVisibleQuote","Math","floor","random","Navbar","display","flex","justifyContent","alignItems","components_ShareButton","components_NewQuoteButton","Author","quoteId","visibleQuoteId","fontFamily","quotes","map","quote","author","Quote","OutputBox","flexDirection","components_Quote","components_Author","Card","textAlign","alignSelf","padding","boxShadow","components_OutputBox","components_Navbar","QuoteMachineView","state","quoteLink","visibleQuote","visibleAuthor","prevProps","prevState","snapshot","setState","_this2","className","top","bottom","left","right","position","components_Card","App","components_QuoteMachineView","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.418d2282.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass ShareButton extends Component {\n    render() {\n\n      let red = this.props.visibleColorRed;\n      let green = this.props.visibleColorGreen;\n      let blue = this.props.visibleColorBlue;\n\n      return (\n        <a target='_blank' href={this.props.twitterLink} title=\"Tweet this quote!\" id='tweet-quote'>\n          <button onClick={() => console.log('Pressed share Button.')} style={{\n            color: 'White',          \n            height: 40,\n            width: 100,\n            fontSize: 20,\n            backgroundColor: `rgb(${red}, ${green}, ${blue})`\n          }}>\n          &#128038;\n          </button>\n        </a>        \n      );\n    }\n  }\n\nexport default ShareButton;","import React, { Component } from 'react';\n\nclass NewQuoteButton extends Component {\n    constructor(props) {\n      super(props);\n    }\n  \n    render() {\n\n      let red = this.props.visibleColorRed;\n      let green = this.props.visibleColorGreen;\n      let blue = this.props.visibleColorBlue;\n\n      return (\n        <button\n        id='new-quote' \n          onClick={() => this.props.changeVisibleQuote( \n            Math.floor(Math.random() * 6), \n            Math.floor(Math.random() * 256), \n            Math.floor(Math.random() * 256), \n            Math.floor(Math.random() * 256) )} \n          style={{\n            color: 'White',\n            backgroundColor: `rgb(${red}, ${green}, ${blue})`,\n            height: 40,\n            width: 150,\n            fontSize: 20,\n          }}\n        >\n          New Quote!\n        </button>\n      );\n    }\n}\n\nconst style = {\n  \n}\n\nexport default NewQuoteButton;\n","import React, {Component} from 'react';\nimport { ShareButton, NewQuoteButton } from './';\n\nclass Navbar extends Component {\n    constructor(props) {\n      super(props);\n    }\n  \n    render() {\n      return (\n        <div style={{display: 'flex', flex: 1, justifyContent: 'space-evenly', height: '50%', alignItems: 'flex-end'}}>\n          <ShareButton\n            visibleColorRed={this.props.visibleColorRed}\n            visibleColorGreen={this.props.visibleColorGreen}\n            visibleColorBlue={this.props.visibleColorBlue}\n            twitterLink={this.props.twitterLink} \n          />\n          <NewQuoteButton\n            changeVisibleQuote={this.props.changeVisibleQuote}\n            visibleColorRed={this.props.visibleColorRed}\n            visibleColorGreen={this.props.visibleColorGreen}\n            visibleColorBlue={this.props.visibleColorBlue} \n          />\n        </div>\n      );\n    }\n}\n\nexport default Navbar;","import React, { Component } from 'react';\n\nclass Author extends Component {\n    constructor(props) {\n      super(props);\n    }\n  \n    render () {\n      let quoteId = this.props.visibleQuoteId;\n      let red = this.props.visibleColorRed;\n      let green = this.props.visibleColorGreen;\n      let blue = this.props.visibleColorBlue;\n      return (\n        <div style={{flex: 1, color: `rgb(${red}, ${green}, ${blue})`, fontFamily: 'Comic Sans MS, cursive, sans-serif', fontSize: 25,}} id=\"author\">\n          \n        {quotes.map(function(quote){\n            if (quote.id === quoteId)\n              return <div>{quote.author}</div>;\n          })}\n  \n        </div>\n      );\n    }\n}\n\nconst quotes = \n[\n  {\n      \"id\": 0,\n      \"author\": \"Dr.Suess\",\n      \"quote\": \"You know you're in love when you can't fall asleep because reality is finally better than your dreams.\"\n  },\n  {\n      \"id\": 1,\n      \"author\": \"John Lennon\",\n      \"quote\": \"Life is what happens when you're busy making other plans.\"\n  },\n  {\n      \"id\": 2,\n      \"author\": \"Helen Keller\",\n      \"quote\": \"When one door of happiness closes, another opens; but often we look so long at the closed door that we do not see the one which has been opened for us.\"\n  },\n  {\n      \"id\": 3,\n      \"author\": \"Mark Twain\",\n      \"quote\": \"Twenty years from now you will be more disappointed by the things that you didn't do than by the ones you did do.\"\n  },\n  {\n      \"id\": 4,\n      \"author\": \"John F. Kennedy\",\n      \"quote\": \"Those who dare to fail miserably can achieve greatly.\"\n  },\n  {\n      \"id\": 5,\n      \"author\": \"Thomas J. Watson\",\n      \"quote\": \"Would you like me to give you a formula for success? It’s quite simple, really: Double your rate of failure. You are thinking of failure as the enemy of success. But it isn’t at all. You can be discouraged by failure or you can learn from it, so go ahead and make mistakes. Make all you can. Because remember that’s where you will find success.\"\n  }\n];\n\nexport default Author;","import React, { Component } from 'react';\n\nclass Quote extends Component {\n    constructor(props) {\n      super(props);\n    }\n  \n    render() {\n      let quoteId = this.props.visibleQuoteId;\n      let red = this.props.visibleColorRed;\n      let green = this.props.visibleColorGreen;\n      let blue = this.props.visibleColorBlue;\n      return (\n        <div style={{ flex: 5, color: `rgb(${red}, ${green}, ${blue})`, fontFamily: 'Comic Sans MS, cursive, sans-serif', fontSize: 30,}} id=\"text\">\n          \n          {quotes.map(function(quote){\n            if (quote.id === quoteId)\n              return <div>{quote.quote}</div>;\n          })}\n  \n        </div>\n      );\n    }\n}\n\nconst quotes = \n[\n  {\n      \"id\": 0,\n      \"author\": \"Dr.Suess\",\n      \"quote\": \"You know you're in love when you can't fall asleep because reality is finally better than your dreams.\"\n  },\n  {\n      \"id\": 1,\n      \"author\": \"John Lennon\",\n      \"quote\": \"Life is what happens when you're busy making other plans.\"\n  },\n  {\n      \"id\": 2,\n      \"author\": \"Helen Keller\",\n      \"quote\": \"When one door of happiness closes, another opens; but often we look so long at the closed door that we do not see the one which has been opened for us.\"\n  },\n  {\n      \"id\": 3,\n      \"author\": \"Mark Twain\",\n      \"quote\": \"Twenty years from now you will be more disappointed by the things that you didn't do than by the ones you did do.\"\n  },\n  {\n      \"id\": 4,\n      \"author\": \"John F. Kennedy\",\n      \"quote\": \"Those who dare to fail miserably can achieve greatly.\"\n  },\n  {\n      \"id\": 5,\n      \"author\": \"Thomas J. Watson\",\n      \"quote\": \"Would you like me to give you a formula for success? It’s quite simple, really: Double your rate of failure. You are thinking of failure as the enemy of success. But it isn’t at all. You can be discouraged by failure or you can learn from it, so go ahead and make mistakes. Make all you can. Because remember that’s where you will find success.\"\n  }\n];\n\nexport default Quote;","import React, { Component } from 'react';\nimport { Quote, Author } from './';\n\nclass OutputBox extends Component {\n    constructor(props) {\n      super(props);\n    }\n  \n    render () {\n      return (\n        <div style={{display: 'flex', flex: 1, flexDirection: \"column\", height: '50%',}}>\n          <Quote\n            visibleQuoteId={this.props.visibleQuoteId}            \n            visibleColorRed={this.props.visibleColorRed}\n            visibleColorGreen={this.props.visibleColorGreen}\n            visibleColorBlue={this.props.visibleColorBlue}\n           />\n          <Author\n            visibleQuoteId={this.props.visibleQuoteId}            \n            visibleColorRed={this.props.visibleColorRed}\n            visibleColorGreen={this.props.visibleColorGreen}\n            visibleColorBlue={this.props.visibleColorBlue} \n           />\n        </div>\n      ); \n    }\n}\n\nexport default OutputBox;","import React, { Component } from 'react';\nimport { OutputBox, Navbar } from './';\n\nclass Card extends Component {\n    constructor(props) {\n      super(props);\n    }\n  \n    render () {\n      return (\n        <div style={{height: '30em', width: '50em', backgroundColor: '#DCDCDC', textAlign: 'center', alignSelf: 'center', padding: '10px', boxShadow: '10px 10px 5px 0px rgba(0,0,0,0.75)'}}>\n            <OutputBox \n              visibleQuoteId={this.props.visibleQuoteId}\n              visibleColorRed={this.props.visibleColorRed}\n              visibleColorGreen={this.props.visibleColorGreen}\n              visibleColorBlue={this.props.visibleColorBlue}\n            />\n            <Navbar\n              changeVisibleQuote={this.props.changeVisibleQuote} \n              visibleColorRed={this.props.visibleColorRed}\n              visibleColorGreen={this.props.visibleColorGreen}\n              visibleColorBlue={this.props.visibleColorBlue}\n              twitterLink={this.props.twitterLink}\n            />\n        </div>\n      );\n    }\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport { Card } from './';\n\n// This is the highest level component\n\nclass QuoteMachineView extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        visibleQuoteId: 0,\n        visibleColorRed: 200, \n        visibleColorGreen: 14, \n        visibleColorBlue: 14,\n        quoteLink: \"twitter.com/intent/tweet?hashtags=quotes,react&related=freecodecamp&text='I can't believe this works.' Kaleb Kougl\",\n        visibleQuote: '',\n        visibleAuthor: '',\n      };      \n    }\n\n    // if there is a change in state this method is called\n    componentDidUpdate(prevProps, prevState, snapshot) {\n      if (prevState.visibleQuoteId !== this.state.visibleQuoteId) {\n        this.setState({ \n          visibleQuote: quotes[this.state.visibleQuoteId].quote, \n          visibleAuthor: quotes[this.state.visibleQuoteId].author, \n          quoteLink: `twitter.com/intent/tweet?hashtags=quotes,react&related=freecodecamp&text=${quotes[this.state.visibleQuoteId].quote} ${quotes[this.state.visibleQuoteId].author}`\n         });    \n      }\n    }\n    \n    render() {\n      let red = this.state.visibleColorRed;\n      let green = this.state.visibleColorGreen;\n      let blue = this.state.visibleColorBlue;\n      return (\n        <div className=\"QuoteMachine\" \n          id='quote-box'\n          style={{\n          backgroundColor: `rgb(${red}, ${green}, ${blue})`, \n          top: 0,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          position: 'absolute',\n          display: 'flex',\n          justifyContent: 'center'\n        }}>\n          <Card \n          visibleQuoteId={this.state.visibleQuoteId}\n          visibleColorRed={this.state.visibleColorRed}\n          visibleColorBlue={this.state.visibleColorBlue}\n          visibleColorGreen={this.state.visibleColorGreen}\n          changeVisibleQuote={ \n            (visibleQuoteId, visibleColorRed, visibleColorGreen, visibleColorBlue) => {\n              this.setState({visibleQuoteId, visibleColorRed, visibleColorGreen, visibleColorBlue})\n            }\n          }\n          twitterLink={this.state.quoteLink}\n          />\n        </div>\n      );\n    }\n}\n\nconst quotes = \n[\n  {\n      \"id\": 0,\n      \"author\": \"Dr.Suess\",\n      \"quote\": \"You know you're in love when you can't fall asleep because reality is finally better than your dreams.\"\n  },\n  {\n      \"id\": 1,\n      \"author\": \"John Lennon\",\n      \"quote\": \"Life is what happens when you're busy making other plans.\"\n  },\n  {\n      \"id\": 2,\n      \"author\": \"Helen Keller\",\n      \"quote\": \"When one door of happiness closes, another opens; but often we look so long at the closed door that we do not see the one which has been opened for us.\"\n  },\n  {\n      \"id\": 3,\n      \"author\": \"Mark Twain\",\n      \"quote\": \"Twenty years from now you will be more disappointed by the things that you didn't do than by the ones you did do.\"\n  },\n  {\n      \"id\": 4,\n      \"author\": \"John F. Kennedy\",\n      \"quote\": \"Those who dare to fail miserably can achieve greatly.\"\n  },\n  {\n      \"id\": 5,\n      \"author\": \"Thomas J. Watson\",\n      \"quote\": \"Would you like me to give you a formula for success? It’s quite simple, really: Double your rate of failure. You are thinking of failure as the enemy of success. But it isn’t at all. You can be discouraged by failure or you can learn from it, so go ahead and make mistakes. Make all you can. Because remember that’s where you will find success.\"\n  }\n];\n\nexport default QuoteMachineView;","import React, { Component } from 'react';\nimport { QuoteMachineView } from './components';\n\nclass App extends Component {\n  render() {\n    return (\n      <QuoteMachineView/>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}